(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{146:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return m}));var a=n(0),i=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=i.a.createContext({}),p=function(e){var t=i.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},b=function(e){var t=p(e.components);return i.a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},u=i.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,o=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),b=p(n),u=a,m=b["".concat(o,".").concat(u)]||b[u]||d[u]||r;return n?i.a.createElement(m,c(c({ref:t},s),{},{components:n})):i.a.createElement(m,c({ref:t},s))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=u;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,o[1]=c;for(var s=2;s<r;s++)o[s]=n[s];return i.a.createElement.apply(null,o)}return i.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},77:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return r})),n.d(t,"metadata",(function(){return o})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return s}));var a=n(2),i=(n(0),n(146));const r={id:"ex5-1",title:"Exercise 5-1"},o={unversionedId:"exercises/ex5-1",id:"exercises/ex5-1",isDocsHomePage:!1,title:"Exercise 5-1",description:"This is an in-class exercise. An exercise page like this one will contain a brief description but is intended to be supplemented by discussion during our meeting time. Complete the exercise to the best of your ability in the time given. Feel free to talk with other students as you work, and do not be afraid to ask questions if you get stuck. Aim to complete as much as possible during our meeting, but you need not hand it in. You are encouraged to work at home to complete what you do not get through today, and ask questions over Piazza or in office hours.",source:"@site/docs\\exercises\\ex5-1.md",slug:"/exercises/ex5-1",permalink:"/cs220-f22/docs/exercises/ex5-1",version:"current"},c=[{value:"Part 1",id:"part-1",children:[]},{value:"Part 2",id:"part-2",children:[]},{value:"Part 3",id:"part-3",children:[]},{value:"Part 4",id:"part-4",children:[]},{value:"Part 5",id:"part-5",children:[]}],l={rightToc:c};function s(e){let{components:t,...n}=e;return Object(i.b)("wrapper",Object(a.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("div",{className:"admonition admonition-info alert alert--info"},Object(i.b)("div",{parentName:"div",className:"admonition-heading"},Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",{parentName:"h5",className:"admonition-icon"},Object(i.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},Object(i.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),Object(i.b)("div",{parentName:"div",className:"admonition-content"},Object(i.b)("p",{parentName:"div"},"This is an in-class exercise. An exercise page like this one will contain a brief description but is intended to be supplemented by discussion during our meeting time. Complete the exercise to the best of your ability in the time given. Feel free to talk with other students as you work, and do not be afraid to ask questions if you get stuck. Aim to complete as much as possible during our meeting, but you need not hand it in. You are encouraged to work at home to complete what you do not get through today, and ask questions over Piazza or in office hours."))),Object(i.b)("div",{className:"admonition admonition-tip alert alert--success"},Object(i.b)("div",{parentName:"div",className:"admonition-heading"},Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",{parentName:"h5",className:"admonition-icon"},Object(i.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},Object(i.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Learning Objectives")),Object(i.b)("div",{parentName:"div",className:"admonition-content"},Object(i.b)("ul",{parentName:"div"},Object(i.b)("li",{parentName:"ul"},"gain practice creating complex structs"),Object(i.b)("li",{parentName:"ul"},"utilize structs with functions, structs, and arrays, and structs and pointers"),Object(i.b)("li",{parentName:"ul"},"malloc and free"),Object(i.b)("li",{parentName:"ul"},"review scanf/printf")))),Object(i.b)("h3",{id:"part-1"},"Part 1"),Object(i.b)("p",null,"Pull the starter code for this exercise from the public repo by taking the following steps:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"Log into ugrad, then navigate into ",Object(i.b)("inlineCode",{parentName:"p"},"cs220-sp21-public"),", type ",Object(i.b)("inlineCode",{parentName:"p"},"git status")," and confirm you have not modified any files or accidentally committed to the public repo. Ask for help if you have added or committed files there and need to undo.")),Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"Type ",Object(i.b)("inlineCode",{parentName:"p"},"git pull")," to synchronize your local repo and working copy with the remote repo.")),Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"Confirm that you can see the template files for today\u2019s exercise by typing ",Object(i.b)("inlineCode",{parentName:"p"},"ls exercises/ex5-1")," -- you should see files named ",Object(i.b)("inlineCode",{parentName:"p"},"main.c"),", ",Object(i.b)("inlineCode",{parentName:"p"},"soccer.c"),", ",Object(i.b)("inlineCode",{parentName:"p"},"soccer.h"),", and ",Object(i.b)("inlineCode",{parentName:"p"},"Makefile")," inside.")),Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"Copy ",Object(i.b)("inlineCode",{parentName:"p"},"main.c"),", ",Object(i.b)("inlineCode",{parentName:"p"},"soccer.c"),", ",Object(i.b)("inlineCode",{parentName:"p"},"soccer.h"),", and ",Object(i.b)("inlineCode",{parentName:"p"},"Makefile")," from the public class repository (in the ",Object(i.b)("em",{parentName:"p"},"/exercises/ex5-1/")," directory) to your personal repo in a new directory named ",Object(i.b)("inlineCode",{parentName:"p"},"ex5-1")," under ",Object(i.b)("inlineCode",{parentName:"p"},"~/cs220/exercises/"),"."))),Object(i.b)("h3",{id:"part-2"},"Part 2"),Object(i.b)("p",null,"Open ",Object(i.b)("inlineCode",{parentName:"p"},"soccer.h")," with a text editor. In this file you will find headers for three functions. In this part you need to create struct types to contain information about a soccer \u201cPlayer\u201d; the \u201cDate\u201d shows the date the player was signed into a team and \u201cStat\u201d stores basic statistics of a player in a game. Note function declarations are already there. You must define the following struct types (green bold shows struct type names and bulleted items are the struct members) before the function headers: "),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"Stat")," "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"int")," num_of_goals (scored)"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"int")," num_of_assists"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"float")," pass_accuracy"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"int")," min_played"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"int")," num_of_shots"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"float")," shot_accuracy")),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"Date")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"int")," day"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"int")," month"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"int")," year")),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"Player")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"int")," age"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"int")," jersey_number"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"bool")," goalkeeper"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"Date *")," date  (pointer to a Date struct defined on the heap)"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"Stat *")," stat  (pointer to a Stat struct defined on the heap)")),Object(i.b)("h3",{id:"part-3"},"Part 3"),Object(i.b)("p",null,"Once you are finished defining the struct types in the header file, you may switch to ",Object(i.b)("inlineCode",{parentName:"p"},"soccer.c"),". There are a few functions in this file, namely ",Object(i.b)("em",{parentName:"p"},"create_team"),", ",Object(i.b)("em",{parentName:"p"},"create_player"),", and ",Object(i.b)("em",{parentName:"p"},"print_team"),". All of those are fully implemented. You should review the implementation of these functions to make sure you understand them."),Object(i.b)("h3",{id:"part-4"},"Part 4"),Object(i.b)("p",null,"Now switch to ",Object(i.b)("inlineCode",{parentName:"p"},"main.c"),". There are a few things you need to do here. First, you should read information from the input using ",Object(i.b)("em",{parentName:"p"},"scanf")," to create a stat structure. Note that this stat struct is dynamically defined on the heap and ",Object(i.b)("em",{parentName:"p"},"new_stat")," points to it. Then, you need to find the player with the latest signed date in the array \u201cteam\u201d. If there are multiple players with the same signed date, you would select the one with smallest index in the array. Finally, update the stat of the player at the index you found with ",Object(i.b)("em",{parentName:"p"},"new_stat"),". Once finished, you can produce an executable by running \u201cmake\u201d and run the executable by typing ",Object(i.b)("em",{parentName:"p"},"./main"),". Check if your code works as expected (i.e., the player\u2019s stats with most recent signed date gets updated properly). "),Object(i.b)("h3",{id:"part-5"},"Part 5"),Object(i.b)("p",null,"Note the use of ",Object(i.b)("inlineCode",{parentName:"p"},"-g")," in the make file, which enables debugging.  Now, run the program using valgrind:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-bash"},"valgrind  --leak-check=full  ./main\n")),Object(i.b)("p",null,"As you can see, we have calls to ",Object(i.b)("inlineCode",{parentName:"p"},"malloc")," in main and ",Object(i.b)("inlineCode",{parentName:"p"},"soccer.c"),", but not enough calls to ",Object(i.b)("inlineCode",{parentName:"p"},"free"),"; there is only one call to ",Object(i.b)("inlineCode",{parentName:"p"},"free")," as a helper for you in ",Object(i.b)("inlineCode",{parentName:"p"},"main.c"),". You need to free stat and date structs on the heap for all the players in the team. Read the valgrind output and make modifications to ",Object(i.b)("inlineCode",{parentName:"p"},"main.c")," to fix the errors/memory leaks."))}s.isMDXComponent=!0}}]);