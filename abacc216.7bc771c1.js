(window.webpackJsonp=window.webpackJsonp||[]).push([[70],{128:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return l})),n.d(t,"rightToc",(function(){return p})),n.d(t,"default",(function(){return b}));var a=n(2),i=n(6),r=(n(0),n(166)),o=["components"],c={id:"ex25",title:"Exercise 25"},l={unversionedId:"exercises/ex25",id:"exercises/ex25",isDocsHomePage:!1,title:"Exercise 25",description:"This is an in-class exercise. An exercise page like this one will contain a brief description but is intended to be supplemented by discussion during our meeting time. Complete the exercise to the best of your ability in the time given. Feel free to talk with other students as you work, and do not be afraid to ask questions if you get stuck. Aim to complete as much as possible during our meeting, and submit on Gradescope to check your solution. You are encouraged to work at home to complete what you do not get through today, and ask questions over Piazza or in office hours.",source:"@site/docs\\exercises\\ex25.md",slug:"/exercises/ex25",permalink:"/cs220-f22/docs/exercises/ex25",version:"current"},p=[{value:"Processing and analyzing text",id:"processing-and-analyzing-text",children:[{value:"Part 1",id:"part-1",children:[]},{value:"Part 2",id:"part-2",children:[]},{value:"Part 3 (Bonus)",id:"part-3-bonus",children:[]}]}],s={rightToc:p};function b(e){var t=e.components,n=Object(i.a)(e,o);return Object(r.b)("wrapper",Object(a.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("div",{className:"admonition admonition-info alert alert--info"},Object(r.b)("div",{parentName:"div",className:"admonition-heading"},Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",{parentName:"h5",className:"admonition-icon"},Object(r.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},Object(r.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),Object(r.b)("div",{parentName:"div",className:"admonition-content"},Object(r.b)("p",{parentName:"div"},"This is an in-class exercise. An exercise page like this one will contain a brief description but is intended to be supplemented by discussion during our meeting time. Complete the exercise to the best of your ability in the time given. Feel free to talk with other students as you work, and do not be afraid to ask questions if you get stuck. Aim to complete as much as possible during our meeting, and submit on Gradescope to check your solution. You are encouraged to work at home to complete what you do not get through today, and ask questions over Piazza or in office hours."))),Object(r.b)("div",{className:"admonition admonition-info alert alert--info"},Object(r.b)("div",{parentName:"div",className:"admonition-heading"},Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",{parentName:"h5",className:"admonition-icon"},Object(r.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},Object(r.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),Object(r.b)("div",{parentName:"div",className:"admonition-content"},Object(r.b)("p",{parentName:"div"},"Get started by running ",Object(r.b)("inlineCode",{parentName:"p"},"git pull")," to update your clone of the public repository, and then copying the ",Object(r.b)("inlineCode",{parentName:"p"},"exercises/ex25")," directory into your personal git repository."))),Object(r.b)("div",{className:"admonition admonition-tip alert alert--success"},Object(r.b)("div",{parentName:"div",className:"admonition-heading"},Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",{parentName:"h5",className:"admonition-icon"},Object(r.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},Object(r.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),Object(r.b)("div",{parentName:"div",className:"admonition-content"},Object(r.b)("p",{parentName:"div"},"Reinforces basic C++ concepts"),Object(r.b)("ul",{parentName:"div"},Object(r.b)("li",{parentName:"ul"},"C++ basics: file I/O using ",Object(r.b)("inlineCode",{parentName:"li"},"istream")," and ",Object(r.b)("inlineCode",{parentName:"li"},"ostream"),", ",Object(r.b)("inlineCode",{parentName:"li"},"string")," manipulation"),Object(r.b)("li",{parentName:"ul"},"Using ",Object(r.b)("inlineCode",{parentName:"li"},"stringstream")," to extract data from a string")))),Object(r.b)("div",{className:"admonition admonition-danger alert alert--danger"},Object(r.b)("div",{parentName:"div",className:"admonition-heading"},Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",{parentName:"h5",className:"admonition-icon"},Object(r.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},Object(r.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"danger")),Object(r.b)("div",{parentName:"div",className:"admonition-content"},Object(r.b)("p",{parentName:"div"},"Implement programs to abbreviate words in a text document, analyze tokens in a text document, and analyze a text document to find the relative frequencies of letters."))),Object(r.b)("h2",{id:"processing-and-analyzing-text"},"Processing and analyzing text"),Object(r.b)("p",null,"In this exercise you will write programs and functions to manipulate\nand transform text using the ",Object(r.b)("inlineCode",{parentName:"p"},"string")," and ",Object(r.b)("inlineCode",{parentName:"p"},"stringstream")," classes, and\nread and write text files using ",Object(r.b)("inlineCode",{parentName:"p"},"ifstream")," and ",Object(r.b)("inlineCode",{parentName:"p"},"ofstream"),"."),Object(r.b)("p",null,'The exercise has two "required" parts, ',Object(r.b)("a",{parentName:"p",href:"#part-1"},"Part 1")," and ",Object(r.b)("a",{parentName:"p",href:"#part-2"},"Part 2"),',\nand one "optional" part, ',Object(r.b)("a",{parentName:"p",href:"#part-3"},"Part 3"),"."),Object(r.b)("h3",{id:"part-1"},"Part 1"),Object(r.b)("p",null,'Words are often recognizable when one or more of the vowels ("a", "e", "i", "o", and "u") are omitted.  For example:'),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},"> W'rds 'r' 'ft'n r'c'gn'z'bl' wh'n 'n' 'r m'r' 'f th' v'w'ls 'r' 'm'tt'd.\n")),Object(r.b)("p",null,"In this transformed sentence, each vowel or consecutive group of vowels has been replaced with a single apostrophe (",Object(r.b)("inlineCode",{parentName:"p"},"'"),") character.  It's a bit difficult to read, but not impossible.  To test the theory that text abbreviated this way is still readable, you will write a program to automatically abbreviate text."),Object(r.b)("p",null,"Complete the program in ",Object(r.b)("inlineCode",{parentName:"p"},"abbrev.cpp")," as follows.  The program takes two command-line arguments. The first is the name of an input file, which will contain the input text. The second is the name of the output file to generate, containing the abbreviated form of the original text. Some helper functions have been provided to get you started, but you'll have to finish writing ",Object(r.b)("inlineCode",{parentName:"p"},"abbreviate")," and ",Object(r.b)("inlineCode",{parentName:"p"},"main"),"."),Object(r.b)("p",null,"Compile the program using the command"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},"g++ -g -std=c++11 -Wall -Wextra -pedantic abbrev.cpp -o abbrev\n")),Object(r.b)("p",null,"Example usage:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},"./abbrev example1.txt example1-abbrev.txt\n")),Object(r.b)("p",null,"As you work, the documentation for the ",Object(r.b)("inlineCode",{parentName:"p"},"string")," class will be useful:\n",Object(r.b)("a",{parentName:"p",href:"http://www.cplusplus.com/reference/string/string/"},"http://www.cplusplus.com/reference/string/string/")),Object(r.b)("p",null,"Three example files are provided, ",Object(r.b)("inlineCode",{parentName:"p"},"example1.txt"),", ",Object(r.b)("inlineCode",{parentName:"p"},"example2.txt"),", and ",Object(r.b)("inlineCode",{parentName:"p"},"example3.txt"),". The expected results of abbreviating the text in each file are in the files ",Object(r.b)("inlineCode",{parentName:"p"},"example1-expected.txt"),", ",Object(r.b)("inlineCode",{parentName:"p"},"example2-expected.txt"),", and ",Object(r.b)("inlineCode",{parentName:"p"},"example3-expected.txt"),". You can check your program's output using the ",Object(r.b)("inlineCode",{parentName:"p"},"diff")," command, e.g. (assuming that your transformed version of ",Object(r.b)("inlineCode",{parentName:"p"},"example1.txt")," is called ",Object(r.b)("inlineCode",{parentName:"p"},"example1-abbrev.txt"),"):"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},"diff -w example1-expected.txt expected1-abbrev.txt\n")),Object(r.b)("p",null,"If the ",Object(r.b)("inlineCode",{parentName:"p"},"diff")," command produces no output, then your output matches the expected output."),Object(r.b)("p",null,"Here are some hints and suggestions."),Object(r.b)("p",null,"You can read the input file line by line using the ",Object(r.b)("inlineCode",{parentName:"p"},"getline")," function, which reads a line of text from an ",Object(r.b)("inlineCode",{parentName:"p"},"istream")," (including an ",Object(r.b)("inlineCode",{parentName:"p"},"ifstream"),") into a ",Object(r.b)("inlineCode",{parentName:"p"},"string")," object.  Your main loop might look something like this (assuming that ",Object(r.b)("inlineCode",{parentName:"p"},"in")," is an ",Object(r.b)("inlineCode",{parentName:"p"},"ifstream")," reading from the input file):"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-cpp"},"string line;\nwhile (getline(in, line)) {\n  // do something with line\n}\n")),Object(r.b)("p",null,"To read words from a line, creating a ",Object(r.b)("inlineCode",{parentName:"p"},"stringstream")," from one line of text and then reading one word at a time can be accomplished as follows:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-cpp"},"stringstream ss(line);\nstring word;\nwhile (ss >> word) {\n  // do something with word\n}\n")),Object(r.b)("p",null,"Defining a function with the following prototype will probably be a good idea:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-cpp"},"string abbreviate(const string &word);\n")),Object(r.b)("p",null,"You should use an ",Object(r.b)("inlineCode",{parentName:"p"},"ofstream")," to write the output file."),Object(r.b)("h3",{id:"part-2"},"Part 2"),Object(r.b)("p",null,"One useful technique enabled by the ",Object(r.b)("inlineCode",{parentName:"p"},"stringstream")," class is the capability to dynamically check a string to determine if it contains data in a particular form (integer value, floating point value, etc.)"),Object(r.b)("p",null,"Complete the program in ",Object(r.b)("inlineCode",{parentName:"p"},"classify.cpp")," so that it reads textual input from ",Object(r.b)("inlineCode",{parentName:"p"},"cin")," one token at a time, and then prints the following summary information:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"the sum of all floating point values found in the input"),Object(r.b)("li",{parentName:"ul"},"the sum of all integer values found in the input"),Object(r.b)("li",{parentName:"ul"},"the number of tokens (words) in the input that weren't numeric"),Object(r.b)("li",{parentName:"ul"},"the total length of all tokens in the input that weren't numeric")),Object(r.b)("p",null,"A token should be considered a floating point value if a ",Object(r.b)("inlineCode",{parentName:"p"},"double")," value can be successfully extracted from it using a ",Object(r.b)("inlineCode",{parentName:"p"},"stringstream"),"."),Object(r.b)("p",null,"A token should be considered an integer value if it is not a floating point value, but an ",Object(r.b)("inlineCode",{parentName:"p"},"int")," value can be successfully extracted from it using a ",Object(r.b)("inlineCode",{parentName:"p"},"stringstream"),", such that the entire string is matched.  For example, the string ",Object(r.b)("inlineCode",{parentName:"p"},'"3.14159"')," could\nbe extracted into an ",Object(r.b)("inlineCode",{parentName:"p"},"int")," variable, but only the ",Object(r.b)("inlineCode",{parentName:"p"},"3")," character would be matched, leaving the remaining text (",Object(r.b)("inlineCode",{parentName:"p"},'".14159"'),") unmatched."),Object(r.b)("p",null,"All tokens that aren't floating point or integer should be considered non-numeric."),Object(r.b)("p",null,"Compile the program using the command"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},"g++ -g -std=c++11 -Wall -Wextra -pedantic classify.cpp -o classify\n")),Object(r.b)("p",null,"You can test your program by running the command"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},"./classify < data.txt\n")),Object(r.b)("p",null,"The output should be something like:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},"Floating point sum: 387.542\nInteger sum: 8\nNumber of non-numeric tokens: 24\nNumber of characters in non-numeric tokens: 114\n\n")),Object(r.b)("div",{className:"admonition admonition-tip alert alert--success"},Object(r.b)("div",{parentName:"div",className:"admonition-heading"},Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",{parentName:"h5",className:"admonition-icon"},Object(r.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},Object(r.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"HINT")),Object(r.b)("div",{parentName:"div",className:"admonition-content"},Object(r.b)("p",{parentName:"div"},"one way to determine if an extraction of an integer value from a ",Object(r.b)("inlineCode",{parentName:"p"},"stringstream")," consumed the entire string is, after the ",Object(r.b)("inlineCode",{parentName:"p"},"int")," value is extracted successfully, to attempt to extract a ",Object(r.b)("inlineCode",{parentName:"p"},"string"),".  If the extraction of the ",Object(r.b)("inlineCode",{parentName:"p"},"string")," value fails, then you know that the extraction of the ",Object(r.b)("inlineCode",{parentName:"p"},"int")," value consumed the entire original string."))),Object(r.b)("h3",{id:"part-3-bonus"},"Part 3 (Bonus)"),Object(r.b)("p",null,"Note that this part is optional!  It's a good opportunity to practice working with input files, STL containers, and STL algorithms, but it's not essential."),Object(r.b)("p",null,"Complete the program in ",Object(r.b)("inlineCode",{parentName:"p"},"letter_freq.cpp"),' so that it counts the number of occurrences of each letter in the input text file specified as the command line argument. The program should ignore case, so (for example) "',Object(r.b)("inlineCode",{parentName:"p"},"A"),'" and "',Object(r.b)("inlineCode",{parentName:"p"},"a"),'" are considered the\nsame letter.'),Object(r.b)("p",null,"After analyzing the input file, the program should print a table with the number of ocurrences of each letter, in the order from most-frequently occurring to least-frequently occurring.  For example, the invocation"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},"./letter_freq example2.txt\n")),Object(r.b)("p",null,"should produce the output"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},"e: 107\ni: 80\nt: 76\nn: 62\no: 62\na: 57\nr: 56\ns: 53\nh: 51\nl: 45\nm: 30\nu: 26\np: 25\ng: 24\nf: 22\ny: 22\nd: 21\nc: 18\nw: 17\nv: 13\nb: 9\nk: 4\nq: 2\nz: 2\n")),Object(r.b)("p",null,"As the data structure for recording the occurrence count of each letter, use a ",Object(r.b)("inlineCode",{parentName:"p"},"vector")," of ",Object(r.b)("inlineCode",{parentName:"p"},"Bucket")," elements, where ",Object(r.b)("inlineCode",{parentName:"p"},"Bucket")," is a struct defined something like the following:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-cpp"},"struct Bucket {\n  char letter;\n  unsigned count;\n};\n")),Object(r.b)("p",null,"The vector should have one ",Object(r.b)("inlineCode",{parentName:"p"},"Bucket")," per letter."),Object(r.b)("p",null,"The program's main loop should read characters from the input file one at a time.  The ",Object(r.b)("inlineCode",{parentName:"p"},"get")," member function should be useful.  For example, if ",Object(r.b)("inlineCode",{parentName:"p"},"in")," is an ",Object(r.b)("inlineCode",{parentName:"p"},"ifstream")," reading from the input file, the main loop might look something like this:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-cpp"},"char c;\nwhile (in.get(c)) {\n  // do something with c\n}\n")),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"<cctype>")," header is included, so that you can use the ",Object(r.b)("inlineCode",{parentName:"p"},"isalpha"),", ",Object(r.b)("inlineCode",{parentName:"p"},"toupper")," and/or ",Object(r.b)("inlineCode",{parentName:"p"},"tolower")," functions.  Your program will need to know which characters are letters, and then convert each letter to a consistent case (upper or lower), in order to know which bucket to update when a letter is encountered."),Object(r.b)("p",null,"Before printing the output, you can use the ",Object(r.b)("inlineCode",{parentName:"p"},"std::sort")," algorithm to sort the vector elements so that they are arranged from most-frequently occurring to least-frequently occurring.  To do this, implement a function with the following signature:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-cpp"},"bool compare_buckets(const Bucket &left, const Bucket &right);\n")),Object(r.b)("p",null,"The function should return ",Object(r.b)("inlineCode",{parentName:"p"},"true")," if the ",Object(r.b)("inlineCode",{parentName:"p"},"left")," bucket should be before the ",Object(r.b)("inlineCode",{parentName:"p"},"right")," bucket.  If two buckets have the same count, then the one with the earlier letter should come first."),Object(r.b)("p",null,"To sort the vector:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-cpp"},"sort(hist.begin(), hist.end(), compare_buckets);\n")),Object(r.b)("p",null,"This code assumes that your ",Object(r.b)("inlineCode",{parentName:"p"},"vector")," of ",Object(r.b)("inlineCode",{parentName:"p"},"Bucket")," elements is  called ",Object(r.b)("inlineCode",{parentName:"p"},"hist"),"."),Object(r.b)("div",{className:"admonition admonition-info alert alert--info"},Object(r.b)("div",{parentName:"div",className:"admonition-heading"},Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",{parentName:"h5",className:"admonition-icon"},Object(r.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},Object(r.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),Object(r.b)("div",{parentName:"div",className:"admonition-content"},Object(r.b)("p",{parentName:"div"},"Remember to add and commit to your local repo copy as your work. Push to your remote repo when finished. Also scp and submit to Gradescope to check your solution. Use ",Object(r.b)("inlineCode",{parentName:"p"},"exit")," to logout from your ugrad account when finished. If you continue to work on the program after class, make sure to keep your repo updated as well!"))))}b.isMDXComponent=!0},166:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return u}));var a=n(0),i=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=i.a.createContext({}),s=function(e){var t=i.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},b=function(e){var t=s(e.components);return i.a.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},d=i.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,o=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),b=s(n),d=a,u=b["".concat(o,".").concat(d)]||b[d]||m[d]||r;return n?i.a.createElement(u,c(c({ref:t},p),{},{components:n})):i.a.createElement(u,c({ref:t},p))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=d;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,o[1]=c;for(var p=2;p<r;p++)o[p]=n[p];return i.a.createElement.apply(null,o)}return i.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);